{-# LANGUAGE TemplateHaskell #-}

module Memory 
 where
 import Control.Applicative
 import Control.Monad.ST
 import Data.Word
 import Data.Array.ST
 import Data.STRef
 import Data.Bits

 import TemplateMemory
 import Types

 import SDL hiding (Palette)

 new :: Window -> Renderer -> ST s (Memory s)
 new window' renderer' = do
   memory' <- newArray_ (0x0000, 0xFFFF)
   vramBank' <- newArray_ (0x8000, 0x9FFF)
   bgPalettes' <- newArray_ (0x0, 0x3F)
   registers' <- newArray (0x0, 0x8) 0 --TODO : 0x0, 0x7... right?
   sp' <-  newSTRef 0xFFFE
   pc' <-  newSTRef 0x0000
   cycles' <- newSTRef 0
   ime' <- newSTRef False
   halt' <- newSTRef False
   mode' <- newSTRef OAMSearch
   line' <- newSTRef 0
   transferred' <- newSTRef False
   gpu_cycles' <- newSTRef 0
   gbc_mode' <- newSTRef True
   return Memory { memory = memory'
                 , vramBank = vramBank'
                 , bgPalettes = bgPalettes'
                 , registers = registers'
                 , memRefs = MemRefs { sp = sp'
                                     , pc = pc'
                                     , cycles = cycles'
                                     , ime = ime'
                                     , halt = halt'
                                     , mode = mode'
                                     , line = line'
                                     , transferred = transferred'
                                     , gpu_cycles = gpu_cycles'
                                     , gbc_mode = gbc_mode'
                                     }
                 , window = window'
                 , renderer = renderer'
                 }

 build_address_type ''MemRefs
 build_read_write ''MemRefs
 

 regNum = fromIntegral . fromEnum
       
 read :: Memory s -> Address -> ST s MemVal
 read mem (OneRegister reg)       = readArray (registers mem) (regNum reg) >>= \n -> return $ MemVal8 n
 read mem (TwoRegister regA regB) = do a <- readArray (registers mem) (regNum regA)
                                       b <- readArray (registers mem) (regNum regB)
                                       return $ MemVal16 $ fromIntegral $ (a `shiftL` 8) + (b)
 read mem (MemAddr ptr)           = readArray (memory mem) ptr >>= \n -> return $ MemVal8 n
 read mem (VRAMAddr ptr)          = readArray (vramBank mem) ptr >>= \n -> return $ MemVal8 n
 read mem (PaletteAddr ptr)       = readArray (bgPalettes mem) ptr >>= \n -> return $ MemVal8 n
 read mem other                   = readAccess mem other


 write :: Memory s -> Address -> MemVal -> ST s ()
 write mem (OneRegister reg) (MemVal8 w)        = writeArray (registers mem) (regNum reg) w
 write mem (TwoRegister regA regB) (MemVal16 w) = do
   writeArray (registers mem) (regNum regA) $ fromIntegral (w `shiftR` 8)
   writeArray (registers mem) (regNum regB) $ fromIntegral (w .&. 0xFF)
 write mem (MemAddr ptr) (MemVal8 w)            = writeArray (memory mem) ptr w
 write mem (VRAMAddr ptr) (MemVal8 w)           = writeArray (vramBank mem) ptr w
 write mem (PaletteAddr ptr) (MemVal8 w)        = writeArray (bgPalettes mem) ptr w
 write mem other val                            = writeAccess mem other val

 boot_rom :: [Word8]
 boot_rom = [0x31, 0xfe, 0xff, 0xaf, 0x21, 0xff, 0x9f, 0x32, 0xcb, 0x7c, 0x20, 0xfb, 
             0x21, 0x26, 0xff, 0x0e, 0x11, 0x3e, 0x80, 0x32, 0xe2, 0x0c, 0x3e, 0xf3,
             0xe2, 0x32, 0x3e, 0x77, 0x77, 0x3e, 0xfc, 0xe0, 0x47, 0x11, 0x04, 0x01,
             0x21, 0x10, 0x80, 0x1a, 0xcd, 0x95, 0x00, 0xcd, 0x96, 0x00, 0x13, 0x7b,
             0xfe, 0x34, 0x20, 0xf3, 0x11, 0xd8, 0x00, 0x06, 0x08, 0x1a, 0x13, 0x22,
             0x23, 0x05, 0x20, 0xf9, 0x3e, 0x19, 0xea, 0x10, 0x99, 0x21, 0x2f, 0x99,
             0x0e, 0x0c, 0x3d, 0x28, 0x08, 0x32, 0x0d, 0x20, 0xf9, 0x2e, 0x0f, 0x18,
             0xf3, 0x67, 0x3e, 0x64, 0x57, 0xe0, 0x42, 0x3e, 0x91, 0xe0, 0x40, 0x04,
             0x1e, 0x02, 0x0e, 0x0c, 0xf0, 0x44, 0xfe, 0x90, 0x20, 0xfa, 0x0d, 0x20,
             0xf7, 0x1d, 0x20, 0xf2, 0x0e, 0x13, 0x24, 0x7c, 0x1e, 0x83, 0xfe, 0x62,
             0x28, 0x06, 0x1e, 0xc1, 0xfe, 0x64, 0x20, 0x06, 0x7b, 0xe2, 0x0c, 0x3e,
             0x87, 0xe2, 0xf0, 0x42, 0x90, 0xe0, 0x42, 0x15, 0x20, 0xd2, 0x05, 0x20,
             0x4f, 0x16, 0x20, 0x18, 0xcb, 0x4f, 0x06, 0x04, 0xc5, 0xcb, 0x11, 0x17,
             0xc1, 0xcb, 0x11, 0x17, 0x05, 0x20, 0xf5, 0x22, 0x23, 0x22, 0x23, 0xc9, 
             0xce, 0xed, 0x66, 0x66, 0xcc, 0x0d, 0x00, 0x0b, 0x03, 0x73, 0x00, 0x83,
             0x00, 0x0c, 0x00, 0x0d, 0x00, 0x08, 0x11, 0x1f, 0x88, 0x89, 0x00, 0x0e,
             0xdc, 0xcc, 0x6e, 0xe6, 0xdd, 0xdd, 0xd9, 0x99, 0xbb, 0xbb, 0x67, 0x63,
             0x6e, 0x0e, 0xec, 0xcc, 0xdd, 0xdc, 0x99, 0x9f, 0xbb, 0xb9, 0x33, 0x3e,
             0x3c, 0x42, 0xb9, 0xa5, 0xb9, 0xa5, 0x42, 0x3c, 0x21, 0x04, 0x01, 0x11,
             0xa8, 0x00, 0x1a, 0x13, 0xbe, 0x20, 0xfe, 0x23, 0x7d, 0xfe, 0x34, 0x20,
             0xf5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xfb, 0x86, 0x00, 0x00,
             0x3e, 0x01, 0xe0, 0x50]
